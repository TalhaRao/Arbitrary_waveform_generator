-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\AWFG_Phase2\Polynomial_Calculation.vhd
-- Created: 2018-08-30 01:10:44
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Polynomial_Calculation
-- Source Path: Dynamic_Calculations/FPGA_Calculation/Polynomial_Calculation
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Dynamic_Calculations_pkg.ALL;

ENTITY Polynomial_Calculation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Time_rsvd                         :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En19
        breakpoints                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        c0Ram                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En19
        c1Ram                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En19
        c2Ram                             :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En19
        y                                 :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En19
        );
END Polynomial_Calculation;


ARCHITECTURE rtl OF Polynomial_Calculation IS

  -- Component Declarations
  COMPONENT Difference_Time
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Time_rsvd                       :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En19
          breakpoints                     :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          dt                              :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En19
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Difference_Time
    USE ENTITY work.Difference_Time(rtl);

  -- Signals
  SIGNAL Difference_Time_out1             : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL Difference_Time_out1_signed      : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL dt_2_mul_temp                    : signed(53 DOWNTO 0);  -- sfix54_En38
  SIGNAL dt_2_out1                        : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Delay_out1                       : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL c2Ram_signed                     : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Delay7_out1                      : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Multiply2_mul_temp               : signed(53 DOWNTO 0);  -- sfix54_En38
  SIGNAL Multiply2_out1                   : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Delay5_out1                      : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL c1Ram_signed                     : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Delay3_out1                      : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Delay4_out1                      : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Multiply1_mul_temp               : signed(53 DOWNTO 0);  -- sfix54_En38
  SIGNAL Multiply1_out1                   : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Delay6_out1                      : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL c0Ram_signed                     : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Delay2_reg                       : vector_of_signed27(0 TO 1);  -- sfix27 [2]
  SIGNAL Delay2_reg_next                  : vector_of_signed27(0 TO 1);  -- sfix27_En19 [2]
  SIGNAL Delay2_out1                      : signed(26 DOWNTO 0);  -- sfix27_En19
  SIGNAL Add_add_cast                     : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Add_add_cast_1                   : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Add_add_temp                     : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Add_add_cast_2                   : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Add_add_temp_1                   : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Add_out1                         : signed(26 DOWNTO 0);  -- sfix27_En19

BEGIN
  -- Calculates Taylor Series Polynomial up to 2nd Order
  -- 
  -- POLYNOMIAL CALCULATION

  u_Difference_Time : Difference_Time
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Time_rsvd => Time_rsvd,  -- sfix27_En19
              breakpoints => breakpoints,  -- uint8
              dt => Difference_Time_out1  -- sfix27_En19
              );

  Difference_Time_out1_signed <= signed(Difference_Time_out1);

  dt_2_mul_temp <= Difference_Time_out1_signed * Difference_Time_out1_signed;
  dt_2_out1 <= dt_2_mul_temp(45 DOWNTO 19);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= dt_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  c2Ram_signed <= signed(c2Ram);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_out1 <= c2Ram_signed;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Multiply2_mul_temp <= Delay_out1 * Delay7_out1;
  Multiply2_out1 <= Multiply2_mul_temp(45 DOWNTO 19);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Multiply2_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  c1Ram_signed <= signed(c1Ram);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= c1Ram_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Difference_Time_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Multiply1_mul_temp <= Delay3_out1 * Delay4_out1;
  Multiply1_out1 <= Multiply1_mul_temp(45 DOWNTO 19);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= Multiply1_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  c0Ram_signed <= signed(c0Ram);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg(0) <= to_signed(16#0000000#, 27);
      Delay2_reg(1) <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Delay2_reg_next(0);
        Delay2_reg(1) <= Delay2_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);
  Delay2_reg_next(0) <= c0Ram_signed;
  Delay2_reg_next(1) <= Delay2_reg(0);

  Add_add_cast <= resize(Delay5_out1, 32);
  Add_add_cast_1 <= resize(Delay6_out1, 32);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_add_cast_2 <= resize(Delay2_out1, 32);
  Add_add_temp_1 <= Add_add_temp + Add_add_cast_2;
  Add_out1 <= Add_add_temp_1(26 DOWNTO 0);

  y <= std_logic_vector(Add_out1);

END rtl;

